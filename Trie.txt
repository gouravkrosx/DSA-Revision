------------------------------------------Trie-----------------------------------------------
-> Solutions are either on LeetCode or codestudio
-> Just Go through eclipse before this.
-----------------------------------------------------------------------------------------
1. Implement TrieI

//Trie Implementation-I

//-> in Trie we cannot predict the space complexity as every trie contains 26 and at worst its 26 ^26, but it doesn't happen as there is so much repition.

class Node {
	Node links[] = new Node[26];
	boolean flag = false;

	public Node() {

	}

	boolean containsKey(char ch) {
		return (links[ch - 'a'] != null);
	}

	Node get(char ch) {
		return links[ch - 'a'];
	}

	void put(char ch, Node node) {
		links[ch - 'a'] = node;
	}

	void setEnd() {
		flag = true;
	}

	boolean isEnd() {
		return flag;
	}
}

public class TrieI {
	private static Node root;

	// Initialize your data structure here

	TrieI() {
		root = new Node();
	}

	// Inserts a word into the trie

//	T: O(len of word)
	public static void insert(String word) {
		Node node = root;
		for (int i = 0; i < word.length(); i++) {
			if (!node.containsKey(word.charAt(i))) {
				node.put(word.charAt(i), new Node());
			}
			// moves to the reference node.
			node = node.get(word.charAt(i));
		}
		node.setEnd();
	}

	// Returns if the word is in the trie

//	T: O(len of word)
	public static boolean search(String word) {
		Node node = root;
		for (int i = 0; i < word.length(); i++) {
			if (!node.containsKey(word.charAt(i))) {
				return false;
			}
			// moves to the reference node.
			node = node.get(word.charAt(i));
		}
		if (node.isEnd()) {
			return true;
		}
		return false;
	}

	// Returns if there is any word in the trie that starts with the given prefix

//	T: O(len of word)
	public static boolean startsWith(String prefix) {
		Node node = root;
		for (int i = 0; i < prefix.length(); i++) {
			if (!node.containsKey(prefix.charAt(i))) {
				return false;
			}
			// moves to the reference node.
			node = node.get(prefix.charAt(i));
		}
		return true;
	}
}
-----------------------------------------------------------------------------------------
2. Implement TrieII


class Nodes {
	Nodes links[] = new Nodes[26];
	int cntEndWith = 0;
	int cntPrefix = 0;

	public Nodes() {
	}

	boolean containsKey(char ch) {
		return (links[ch - 'a'] != null);
	}

	Nodes get(char ch) {
		return links[ch - 'a'];
	}

	void put(char ch, Nodes node) {
		links[ch - 'a'] = node;

	}

	void increaseEnd() {
		cntEndWith++;
	}

	void increasePrefix() {
		cntPrefix++;
	}

	void deleteEnd() {
		cntEndWith--;
	}

	void reducePrefix() {
		cntPrefix--;
	}

	int getEnd() {
		return cntEndWith;
	}

	int getPrefix() {
		return cntPrefix;
	}
}

public class TrieII {
	private Nodes root;

	// Initialize your data structure here

	TrieII() {
		root = new Nodes();
	}

	// Inserts a word into the trie

	public void insert(String word) {
		Nodes node = root;
		for (int i = 0; i < word.length(); i++) {
			if (!node.containsKey(word.charAt(i))) {
				node.put(word.charAt(i), new Nodes());
			}
			node = node.get(word.charAt(i));
			node.increasePrefix();
		}
		node.increaseEnd();
	}

	public int countWordsEqualTo(String word) {
		Nodes node = root;
		for (int i = 0; i < word.length(); i++) {
			if (node.containsKey(word.charAt(i))) {
				node = node.get(word.charAt(i));
			} else {
				return 0;
			}
		}
		return node.getEnd();
	}

	public int countWordsStartingWith(String word) {
		Nodes node = root;
		for (int i = 0; i < word.length(); i++) {
			if (node.containsKey(word.charAt(i))) {
				node = node.get(word.charAt(i));
			} else {
				return 0;
			}
		}
		return node.getPrefix();
	}

	public void erase(String word) {
		Nodes node = root;
		for (int i = 0; i < word.length(); i++) {
			if (node.containsKey(word.charAt(i))) {
				node = node.get(word.charAt(i));
				node.reducePrefix();
			} else {
				return;
			}
		}
		node.deleteEnd();
	}

}
-----------------------------------------------------------------------------------------
3. Longest Word with All Prefixes

T: O(N * (avg length))

static class Node {
	Node links[] = new Node[26];
	boolean flag = false;

	public Node() {
	}

	boolean containsKey(char ch) {
		return (links[ch - 'a'] != null);
	}

	Node get(char ch) {
		return links[ch - 'a'];
	}

	void put(char ch, Node node) {
		links[ch - 'a'] = node;
	}

	void setEnd() {
		flag = true;
	}

	boolean isEnd() {
		return flag;
	}
}

 static class Trie {
	private Node root;

	// Initialize your data structure here

	Trie() {
		root = new Node();
	}

	// Inserts a word into the trie
	public void insert(String word) {
		Node node = root;
		for (int i = 0; i < word.length(); i++) {
			if (!node.containsKey(word.charAt(i))) {
				node.put(word.charAt(i), new Node());
			}
			// moves to the reference node.
			node = node.get(word.charAt(i));
		}
		node.setEnd();
	}
 
    public boolean checkIfAllPrefixExists(String word){
        Node node = root;
        
        for(int i=0;i<word.length();i++){
            if(node.containsKey(word.charAt(i))){
               	node = node.get(word.charAt(i));
                if(!node.isEnd()){
                    return false;
                } 
            }else return false;
        }
        return true;
    }
    
}
    
  public static String completeString(int n, String[] a) {
    	Trie obj = new Trie();
      
      	for(int i=0;i<n;i++){
            obj.insert(a[i]);
        }
      
      	String longest = "";
      
      for(int i=0;i<n;i++){
          if(obj.checkIfAllPrefixExists(a[i])){
              if(a[i].length()>longest.length()){
                  longest = a[i];
              }else if(a[i].length() == longest.length() && a[i].compareTo(longest)<0){ //checking for lexicographically smaller
          	  	  longest = a[i];	
              }	
          }
      }
      if(longest.equals(""))return "None";
      return longest;
  }
-----------------------------------------------------------------------------
4. Number of Distinct Substring in a String

static class Node {
	Node links[] = new Node[26];

	public Node() {
	}

	boolean containsKey(char ch) {
		return (links[ch - 'a'] != null);
	}

	Node get(char ch) {
		return links[ch - 'a'];
	}

	void put(char ch, Node node) {
		links[ch - 'a'] = node;
	}
}    

	public static int countDistinctSubstrings(String s) 
	{
        int n = s.length();
		Node root = new Node();
        int count=0;
        
        for(int i=0;i<n;i++){
            Node node = root;
            for(int j=i;j<n;j++){
                if(!node.containsKey(s.charAt(j))){
                    node.put(s.charAt(j),new Node());
                    count++;
                }
                   node=node.get(s.charAt(j));
            }
        }
        return count+1; //+1 for empty string
  }
-----------------------------------------------------------------------------
5. Maximum Xor of two number in an array 
T: O(32*N)

class Node {
    Node links[] = new Node[2]; 
    
    public Node() {
    }
    boolean containsKey(int ind) {
        return (links[ind] != null); 
    }
    Node get(int ind) {
        return links[ind]; 
    }
    void put(int ind, Node node) {
        links[ind] = node; 
    }
}
class Trie {
    private static Node root; 

    //Initialize your data structure here

    Trie() {
        root = new Node(); 
    }


    //Inserts a word into the trie

    public static void insert(int num) {
        Node node = root;
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(!node.containsKey(bit)) {
                node.put(bit, new Node()); 
            }
            node = node.get(bit); 
        }
    }
    
    public int getMax(int num) {

// here we are trying to set bit as 1 if possible for a given bit from left to maximize the xor
        Node node = root; 
        int maxNum = 0; 
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
	//checking if opposite bit is present or not for setting bit (xor operation)
            if(node.containsKey(1 - bit)) {
                maxNum = maxNum | (1<<i);   //setting the bit
                node = node.get( 1 - bit); 
            }
            else {
                node = node.get(bit); 
            }
        }
        return maxNum; 
    }
}
public class Solution 
{

	public static int maxXOR(int n, int m, ArrayList<Integer> arr1, ArrayList<Integer> arr2) 
	{
	    Trie trie = new Trie(); 
        for(int i = 0;i<n;i++) {
            trie.insert(arr1.get(i)); 
        }
        int maxi = 0; 
        for(int i = 0;i<m;i++) {
            maxi = Math.max(maxi, trie.getMax(arr2.get(i))); 
        }
        return maxi; 
	}
}
-----------------------------------------------------------------------------
6. Max Xor Queries (Problem link->https://www.codingninjas.com/codestudio/problems/max-xor-queries_1382020?utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_tries_videos)

T: O(NLogN + QLogQ + Q*32 + N*32)

class Node {
    Node links[] = new Node[2]; 
    
    public Node() {
    }
    boolean containsKey(int ind) {
        return (links[ind] != null); 
    }
    Node get(int ind) {
        return links[ind]; 
    }
    void put(int ind, Node node) {
        links[ind] = node; 
    }
}
class Trie {
    private static Node root; 

    //Initialize your data structure here

    Trie() {
        root = new Node(); 
    }


    //Inserts a word into the trie

    public static void insert(int num) {
        Node node = root;
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(!node.containsKey(bit)) {
                node.put(bit, new Node()); 
            }
            node = node.get(bit); 
        }
    }
    
    public int getMax(int num) {
        Node node = root; 
        int maxNum = 0; 
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(node.containsKey(1 - bit)) {
                maxNum = maxNum | (1<<i);
                node = node.get( 1 - bit); 
            }
            else {
                node = node.get(bit); 
            }
        }
        return maxNum; 
    }
}
public class Solution {

// we are basically sorting accoding to the queries limit in increasing order in order to use the getMax(),
in this we are not maintaining the less than limit constraint.
then we just upto that limit and so on. in the trie 

    public static ArrayList<Integer> maxXorQueries(ArrayList<Integer> arr, ArrayList<ArrayList<Integer>> queries) {
         Collections.sort(arr); 
         ArrayList<ArrayList<Integer>> offlineQueries = new ArrayList<ArrayList<Integer>>(); 
         int m = queries.size(); 
         for(int i = 0;i<m;i++) {
             ArrayList<Integer> temp = new ArrayList<Integer>(); 
             temp.add(queries.get(i).get(1)); 
             temp.add(queries.get(i).get(0)); 
             temp.add(i); 
             offlineQueries.add(temp); 
         }
         Collections.sort(offlineQueries, new Comparator<ArrayList<Integer>> () {
            @Override
            public int compare(ArrayList<Integer> a, ArrayList<Integer> b) {
                return a.get(0).compareTo(b.get(0));
            }
        });
         int ind = 0;
         int n = arr.size(); 
         Trie trie = new Trie(); 
         ArrayList<Integer> ans = new ArrayList<Integer>(m); 
         for(int i = 0;i<m;i++) ans.add(-1); 
         for(int i = 0;i<m;i++) {
             while(ind<n && arr.get(ind) <= offlineQueries.get(i).get(0)) {
                 trie.insert(arr.get(ind)); 
                 ind++; 
             }
             int queryInd = offlineQueries.get(i).get(2); 
             if(ind!=0) ans.set(queryInd, trie.getMax(offlineQueries.get(i).get(1)));
             else ans.set(queryInd, -1); 
         }
         return ans; 
    }
}
-----------------------------------------------------------------------------
7. 
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------



